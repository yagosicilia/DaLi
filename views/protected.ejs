<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dali</title>
  <link rel="stylesheet" href="/css/styles.css" />
  <style>
    body{font-family:sans-serif;margin:20px;background:#fff}
    nav{margin-bottom:20px}
    nav button{margin-right:10px;padding:8px 16px;font-size:16px;cursor:pointer}
    .seccion{display:none}
    .seccion.activa{display:block}
    input,button{margin-top:8px}
  </style>
</head>

<body>
  <nav>
    <button data-seccion="inicio">Inicio</button>
    <button data-seccion="misnfts">Mis NFTs</button>
    <button data-seccion="subir">Subir Obra</button>
    <button data-seccion="transferir">Transferir Obra</button>
    <button data-seccion="subastas">Subastas</button>
    <button id="btnConectar">Conectar MetaMask</button>
    <button id="cerrarSesion">Cerrar sesi√≥n</button>
  </nav>

  <main>
    <!-- ‚ë† INICIO -->
    <section id="inicio" class="seccion activa">
      <div class="bigote-contenedor">
        <img src="/bigote-dali.png" alt="Bigote de Dal√≠ de colores" class="bigote-img" />
        <div class="texto-dentro-bigote">
          <p>Registra, protege y transfiere tus obras digitales con tecnolog√≠a blockchain.</p>
          <p>Conecta tu wallet, sube tus creaciones y convi√©rtelas en NFTs √∫nicos y verificables.</p>
        </div>
      </div>
    </section>


    <!-- ‚ë° MIS NFTs -->
    <section id="misnfts" class="seccion">
      <div style="display: flex; justify-content: flex-end; align-items: center;">
        <button id="misnfts-refrescar" title="Recargar" class="btn-recargar">üîÑ</button>
      </div>

      <p id="misnfts-status" style="margin-top: 0;">&nbsp;</p>

      <div id="misnfts-contenedor"
        style="display: grid; grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); gap: 16px; margin-top:16px;">
      </div>
    </section>

    <!-- ‚ë¢ SUBIR -->
    <section id="subir" class="seccion">
      <div class="upload-wrapper">
        <button id="btnRegistrar" class="btn-registrar" style="display: none;">Registrar Obra</button>
        <button id="btnRecargarSubir" class="btn-recargar" style="display: none;" title="Recargar">üîÑ</button>


        <!-- Subida -->
        <label class="upload-box" id="upload-box">
          <input type="file" id="archivo" accept="image/*" hidden />
          <img id="preview" />
          <span id="placeholder">Haz click para subir tu imagen</span>
        </label>

        <!-- Resultado -->
        <div id="respuesta" class="resultado-obra"></div>
      </div>
    </section>




    <!-- ‚ë£ TRANSFERIR -->
    <section id="transferir" class="seccion">
      <form id="formBuscarUsuario">
        <label for="nombre-usuario">Nombre del destinatario:</label>
        <input type="text" id="nombre-usuario" placeholder="Ej. Rodri" required>
        <button type="submit">Buscar</button>
        <p id="estado-busqueda" style="color:red;"></p>
      </form>
    </section>

    <!-- Modal para selecci√≥n de obra -->
    <div id="modal-nfts" class="modal-nfts">
      <div class="modal-contenido">
        <span id="cerrar-modal" class="cerrar-modal">√ó</span>

        <div id="bloque-transferencia" style="display: none;">
          <h3>Selecciona la obra que quieres transferir</h3>
          <div id="galeria-nfts" class="galeria-nfts"></div>
          <div style="text-align: center; margin-top: 20px;">
            <button id="confirmarTransferencia" class="btn-transferir">Transferir</button>
          </div>
          <p id="estado-transferencia"></p>
        </div>

        <p id="cargando-nfts" style="color: gray; font-size: 18px;">Cargando obras‚Ä¶</p>
      </div>
    </div>



    <!-- ‚ë§ SUBASTAS -->
    <section id="subastas" class="seccion">
      <h2>Subastas</h2>

      <!-- Crear -->
      <details open>
        <summary>Crear subasta</summary>
        <label>Token ID: <input type="number" id="auc-token" min="0"></label>
        <label>Precio m√≠nimo (ETH): <input type="number" id="auc-min" min="0" step="0.001"></label>
        <label>Duraci√≥n:
          <input type="number" id="auc-h" min="0" value="0" style="width:60px"> h
          <input type="number" id="auc-m" min="0" max="59" value="0" style="width:60px"> m
          <input type="number" id="auc-s" min="0" max="59" value="30" style="width:60px"> s
        </label>
        <button id="btnCrearAuc">Crear subasta</button>
        <p id="auc-create-status"></p>
      </details>

      <hr>

      <!-- Pujar / finalizar -->
      <details>
        <summary>Pujar o finalizar</summary>
        <label>Token ID: <input type="number" id="bid-token" min="0"></label>
        <label>Tu puja (ETH): <input type="number" id="bid-amt" min="0" step="0.001"></label>
        <button id="btnPujar">Pujar</button>
  
        <p id="bid-status"></p>
      </details>

      <h3 style="margin-top:2rem">Subastas activas</h3>
      <p id="auc-status">Pulsa ‚ÄúActualizar subastas‚Äù para refrescar.</p>
      <button id="btnAucRefresh">Actualizar subastas</button>

      <div id="auc-grid"
           style="display:grid;grid-template-columns:repeat(auto-fill,minmax(210px,1fr));
                  gap:14px;margin-top:16px;"></div>
    </section>
  </main>

  <!-- ============================== SCRIPTS ============================== -->
  <script>
    /* ---------- Navegaci√≥n entre secciones ---------- */
    const secciones = document.querySelectorAll('.seccion');
    document.querySelectorAll('nav button[data-seccion]')
      .forEach(btn =>
        btn.addEventListener('click', () => {
          const id = btn.dataset.seccion;
          secciones.forEach(s => s.classList.remove('activa'));
          document.getElementById(id).classList.add('activa');
        })
      );

    document.getElementById('cerrarSesion').addEventListener('click', async () => {
      await fetch('/logout', { method: 'POST' });
      window.location.href = '/';
    });
  </script>

  <script type="module">
    /* ==================  CONFIG ================== */
    import { ethers } from 'https://cdn.jsdelivr.net/npm/ethers@6/dist/ethers.min.js';
    import nftABI     from '/ABI.js';
    import auctionABI from '/AuctionABI.js';

    const NFT_ADDR     = '0xc4446571ad11804b84305e42d3a79098b1cf1f48';
    const AUCTION_ADDR = '0xd86fd6ce850edac6898298867fa8d6f52f251c9b';

    const autor            = '<%= username %>';
    const walletDelUsuario = '<%= walletAddress %>';
    const ethToWei         = eth => ethers.parseEther(String(eth));

    let auctionInst = null;
    let metamaskOK  = false;


    let solicitandoConexion = false;

    async function asegurarConexion () {
      if (!window.ethereum) throw new Error('MetaMask no detectado');
      const accs = await window.ethereum.request({ method: 'eth_accounts' });
      if (accs.length === 0) await window.ethereum.request({ method: 'eth_requestAccounts' });
      metamaskOK = true;
    }

    async function signerYContratos () {
      await asegurarConexion();
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer   = await provider.getSigner();
      const nftInst  = new ethers.Contract(NFT_ADDR, nftABI, signer);
      if (!auctionInst)
        auctionInst = new ethers.Contract(AUCTION_ADDR, auctionABI, signer);
      return { signer, nftInst };
    }



    btnConectar.addEventListener('click', async () => {
      if (solicitandoConexion) return;

      try {
        solicitandoConexion = true;
        btnConectar.disabled = true;
        btnConectar.textContent = 'Conectando...';

        await asegurarConexion(); // ‚úÖ usa la funci√≥n unificada

        const cuentas = await window.ethereum.request({ method: 'eth_accounts' });
        alert(`ü¶ä MetaMask conectada: ${cuentas[0]}`);

        btnConectar.textContent = 'Conectado ‚úÖ';
        btnConectar.disabled = true;
      } catch (err) {
        alert('‚ùå Error al conectar MetaMask: ' + err.message);
        btnConectar.textContent = 'Conectar MetaMask';
        btnConectar.disabled = false;
      } finally {
        solicitandoConexion = false;
      }
    });


    /* ================== SUBIR / MINT ================== */
    const archivoInput = document.getElementById('archivo');
    const preview = document.getElementById('preview');
    const placeholder = document.getElementById('placeholder');
    const uploadBox = document.getElementById('upload-box');

    // Mostrar vista previa y ocultar borde y texto
    archivoInput.addEventListener('change', e => {
      const file = e.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = e => {
        preview.src = e.target.result;
        preview.style.display = 'block';
        placeholder.style.display = 'none';
        uploadBox.style.border = 'none'; // Oculta borde
        uploadBox.style.background = 'none';
        btnRegistrar.style.display = 'block';
      };
      reader.readAsDataURL(file);
    });

    // Registrar NFT
    btnRegistrar.addEventListener('click', async () => {
      const file = archivoInput.files[0];
      if (!autor || !file) {
        alert('Completa autor + archivo');
        return;
      }

      const overlay = document.getElementById('overlay-cargando');
      overlay.style.display = 'flex'; // ‚è≥ Muestra el overlay

      try {
        const fd = new FormData();
        fd.append('autor', autor);
        fd.append('miArchivo', file);

        const r = await fetch('/subir-archivo', { method: 'POST', body: fd });
        if (!r.ok) throw new Error('Error subiendo a IPFS');

        const { tokenURI, id } = await r.json();// ‚Üê aseg√∫rate que devuelves el ID
        const { nftInst } = await signerYContratos();

        const tx = await nftInst.registrarObra(tokenURI);
        const receipt = await tx.wait();

        // Buscar el tokenId en los logs del evento Transfer
        let tokenId = null;
        for (const log of receipt.logs) {
          try {
            const parsed = nftInst.interface.parseLog(log);
            if (parsed.name === 'Transfer') {
              tokenId = parsed.args.tokenId.toString();
              break;
            }
          } catch {}
        }


        // ‚úÖ Resultado limpio
        respuesta.innerHTML = `
          <div class="resultado-obra">
            <h3>‚úÖ Obra registrada correctamente</h3>
            <img src="${preview.src}" alt="Preview de la obra" />
            <p><strong>ID:</strong> ${tokenId ?? 'No detectado'}</p>
            <a href="${tokenURI}" target="_blank">Ver imagen en IPFS</a><br>
            <a href="https://sepolia.etherscan.io/tx/${tx.hash}" target="_blank">
              Ver transacci√≥n en Etherscan
            </a>
          </div>
        `;


        // Reset visual
        document.getElementById('upload-box')?.remove();
        placeholder?.remove();
        btnRegistrar.style.display = 'none';
        btnRecargarSubir.style.display = 'block';;
      } catch (e) {
        console.error(e);
        respuesta.textContent = '‚ùå ' + e.message;
      } finally {
        overlay.style.display = 'none'; // ‚ùå Oculta overlay
      }
    });
    const btnRecargarSubir = document.getElementById('btnRecargarSubir');

    btnRecargarSubir.addEventListener('click', () => {
      // Oculta el bot√≥n de recargar
      btnRecargarSubir.style.display = 'none';

      // Restablece el √°rea de carga
      archivoInput.value = '';
      preview.src = '';
      preview.style.display = 'none';
      placeholder.style.display = 'inline';
      uploadBox.style.display = 'flex';
      uploadBox.style.border = '2px dashed #888';
      uploadBox.style.background = '#fafafa';

      // Limpia respuesta e interfaz
      respuesta.innerHTML = '';

      // Muestra de nuevo el bot√≥n de registrar
      btnRegistrar.style.display = 'none';
    });




    /* ================== TRANSFERENCIA ================== */
    const formBuscar = document.getElementById('formBuscarUsuario');
    const inputNombre = document.getElementById('nombre-usuario');
    const estadoBusqueda = document.getElementById('estado-busqueda');
    const modalTransferir = document.getElementById('modal-nfts');
    const galeria = document.getElementById('galeria-nfts');
    const btnCerrar = document.getElementById('cerrar-modal');
    const btnTransferir = document.getElementById('confirmarTransferencia');
    const estadoTransferencia = document.getElementById('estado-transferencia');

    let walletDestino = null;
    let obraSeleccionada = null;

    formBuscar.addEventListener('submit', async e => {
      const cargandoMsg = document.getElementById('cargando-nfts');
      const bloqueTransferencia = document.getElementById('bloque-transferencia');

      e.preventDefault();
      cargandoMsg.style.display = 'block';
      bloqueTransferencia.style.display = 'none';

      const nombre = inputNombre.value.trim();
      estadoBusqueda.textContent = '';
      galeria.innerHTML = '';
      obraSeleccionada = null;

      try {
        const r = await fetch(`/wallet/${nombre}`);
        if (!r.ok) throw new Error('No encontrado');
        const { walletAddress } = await r.json();
        walletDestino = walletAddress;
        modalTransferir.style.display = 'flex';

        const provider = new ethers.BrowserProvider(window.ethereum);
        const contrato = new ethers.Contract(NFT_ADDR, nftABI, provider);
        const signer = await provider.getSigner();
        const myAddr = await signer.getAddress();

        const obras = [];
        const maxId = await hallarMaxTokenId(contrato);
        for (let id = 1n; id <= maxId; id++) {
          try {
            const owner = await contrato.ownerOf(id);
            if (owner.toLowerCase() === myAddr.toLowerCase()) {
              const uri = await contrato.tokenURI(id);
              const meta = await fetch(uri).then(r => r.json());
              obras.push({ id, image: meta.image });
            }
          } catch {}
        }

        obras.sort((a, b) => Number(b.id) - Number(a.id));

        for (const { id, image } of obras) {
          const contenedor = document.createElement('div');
          contenedor.className = 'nft-img-container';

          const idSpan = document.createElement('span');
          idSpan.className = 'nft-id';
          idSpan.textContent = `ID ${id}`;

          const img = document.createElement('img');
          img.src = image;
          img.title = `ID ${id}`;
          img.classList.add('nft-image');

          img.addEventListener('click', () => {
            document.querySelectorAll('.galeria-nfts .nft-img-container')
              .forEach(c => c.classList.remove('seleccionado'));
            contenedor.classList.add('seleccionado');
            obraSeleccionada = id;
          });

          contenedor.appendChild(idSpan);
          contenedor.appendChild(img);
          galeria.appendChild(contenedor);
        }

        // ‚úÖ Muestra la galer√≠a cuando termina
        cargandoMsg.style.display = 'none';
        bloqueTransferencia.style.display = 'block';

      } catch {
        cargandoMsg.style.display = 'none';
        estadoBusqueda.textContent = '‚ùå Usuario no encontrado o sin wallet';
      }
    });



    btnCerrar.addEventListener('click', () => {
      modalTransferir.style.display = 'none';
      galeria.innerHTML = '';
      obraSeleccionada = null;
      estadoTransferencia.textContent = '';
    });

    btnTransferir.addEventListener('click', async () => {
      if (!obraSeleccionada || !walletDestino) return;
      try {
        const overlay = document.getElementById('overlay-transferencia');
        overlay.style.display = 'flex'; // Muestra pantalla de carga

        const { signer, nftInst } = await signerYContratos();
        const tx = await nftInst['safeTransferFrom(address,address,uint256)'](
          await signer.getAddress(), walletDestino, BigInt(obraSeleccionada)
        );
        await tx.wait();

        overlay.style.display = 'none'; // Oculta carga

        // Cierra el modal
        modalTransferir.style.display = 'none';

        // Limpia campos
        inputNombre.value = '';
        estadoBusqueda.textContent = '';
        estadoTransferencia.textContent = '';
        galeria.innerHTML = '';
        obraSeleccionada = null;

        alert('‚úÖ Transferencia completada con √©xito');
      } catch (e) {
        console.error(e);
        document.getElementById('overlay-transferencia').style.display = 'none';
        estadoTransferencia.textContent = '‚ùå ' + (e.reason || e.message);
      }
    });
    btnCerrar.addEventListener('click', () => {
      modalTransferir.style.display = 'none';
      galeria.innerHTML = '';
      obraSeleccionada = null;
      estadoTransferencia.textContent = '';
    });




    /* ================== SUBASTAS ================== */
    const btnCrearAuc  = document.getElementById('btnCrearAuc');
    const btnPujar     = document.getElementById('btnPujar');

    const aucSt     = document.getElementById('auc-create-status');
    const bidSt     = document.getElementById('bid-status');
    const aucGrid   = document.getElementById('auc-grid');
    const aucStatus = document.getElementById('auc-status');
    document.getElementById('btnAucRefresh')
            .addEventListener('click', cargarSubastas);

    const tNow  = () => Math.floor(Date.now() / 1000);
    const short = a => a.slice(0,6) + '‚Ä¶' + a.slice(-4);
    const left  = ts => {
      const s = ts - tNow();
      if (s <= 0) return 'cerrada';
      const h = Math.floor(s / 3600);
      const m = Math.floor((s % 3600) / 60);
      return `${h} h ${m} m`;
    };

    /* ---------- resolver alias (addr ‚Üí nombre) ---------- */
    const aliasCache = {};

    async function aliasDe(addr) {
      addr = addr.toLowerCase();
      if (aliasCache[addr]) return aliasCache[addr];      // hit cach√©

      const r = await fetch(`/alias/${addr.toLowerCase()}`); // est√° bien
      if (!r.ok) return null;
      const { username } = await r.json();
      if (username) aliasCache[addr] = username;          // guarda solo si existe
      return username || null;
    }

    async function cargarSubastas () {
      try {
        aucStatus.textContent = 'Buscando subastas en la cadena‚Ä¶';
        aucGrid.innerHTML = '';

        const { nftInst: nft } = await signerYContratos();
        const auc = auctionInst;

        /* ‚ë† Todos los AuctionCreated (del m√°s nuevo al m√°s viejo) */
        const events = (await auc.queryFilter(auc.filters.AuctionCreated())).reverse();
        if (events.length === 0) {
          aucStatus.textContent = 'No hay subastas creadas todav√≠a.';
          return;
        }

        const vistos = new Set();                       // evita duplicados

        for (const ev of events) {
          const tokenId   = ev.args[0];
          const minBidWei = ev.args[2];

          if (vistos.has(tokenId)) continue;            // ya pintamos este NFT
          vistos.add(tokenId);

          const lot = await auc.lots(tokenId);
          if (lot.endTime === 0n) continue;             // lote vac√≠o

          const vencida = Number(lot.endTime) < tNow();
          if (vencida) {                                // auto-finalizar
            try { await (await auc.finalize(tokenId)).wait(); }
            catch {}
            continue;
          }

          /* --------- METADATOS DEL NFT --------- */
          let image = '', title = `Token ${tokenId}`;
          try {
            const uri  = await nft.tokenURI(tokenId);
            const meta = await fetch(uri).then(r => r.json());
            image = meta.image || '';
            title = meta.name  || title;
          } catch {/* silenciamos errores de tokenURI */}

          /* --------- TARJETA VISUAL --------- */
          const card = document.createElement('div');
          card.style.cssText =
            'border:1px solid #ddd;border-radius:8px;padding:12px;text-align:center';
          const nombreVend  = (await aliasDe(lot.seller))   || short(lot.seller);
          const nombreBidder = lot.highBidder === ethers.ZeroAddress
                ? '‚Äî'
                : (await aliasDe(lot.highBidder)) || short(lot.highBidder);

          card.innerHTML = `
            <img src="${image}"
                style="width:100%;aspect-ratio:1/1;object-fit:cover;border-radius:6px">
            <h4 style="margin:6px 0">${title}</h4>
            <p style="font-size:13px;line-height:1.25">
              Precio inicial: ${ethers.formatEther(minBidWei)} ETH<br>
              Mejor puja: ${nombreBidder === '‚Äî'
                ? '‚Äî'
                : `${ethers.formatEther(lot.highBid)} ETH por ${nombreBidder}`}<br>
              Vendedor: ${nombreVend}<br>
              Termina en: ${left(Number(lot.endTime))}
            </p>
            <button style="width:100%;margin-top:4px"
                    onclick="prefillBid(${tokenId})">
              Pujar
            </button>`;

          aucGrid.appendChild(card);
        }

        aucStatus.textContent = aucGrid.childElementCount
          ? ''
          : 'No hay subastas activas.';
      } catch (err) {
        console.error(err);
        aucStatus.textContent = '‚ùå ' + (err.message || err);
      }
    }




    window.prefillBid = id => {
      document.getElementById('bid-token').value = id;
      document.querySelectorAll('details')[0].open = false;
      document.querySelectorAll('details')[1].open = true;
    };

    cargarSubastas();
    cargarMisNFTs();

    /* ---------- crear subasta ---------- */
    btnCrearAuc.addEventListener('click', async () => {
      try {
        const tokenId = BigInt(document.getElementById('auc-token').value);
        const minEthStr = document.getElementById('auc-min').value.trim();
        const h = +document.getElementById('auc-h').value;
        const m = +document.getElementById('auc-m').value;
        const s = +document.getElementById('auc-s').value;
        const durSec = h*3600 + m*60 + s;

        if (tokenId < 0n || durSec < 1 || !/^\d*\.?\d+$/.test(minEthStr))
          throw new Error('Datos inv√°lidos (comprueba duraci√≥n y precio)');

        const minWei = ethers.parseEther(minEthStr);

        const { signer, nftInst } = await signerYContratos();
        if (!(await nftInst.isApprovedForAll(await signer.getAddress(), AUCTION_ADDR))) {
          aucSt.textContent = 'Aprobando contrato‚Ä¶';
          await (await nftInst.setApprovalForAll(AUCTION_ADDR, true)).wait();
        }

        aucSt.textContent = 'Creando subasta‚Ä¶';
        const tx = await auctionInst.createAuction(tokenId, minWei, durSec);
        await tx.wait();
        aucSt.innerHTML =
          `‚úÖ Subasta creada (<a target="_blank"
            href="https://sepolia.etherscan.io/tx/${tx.hash}">
            ${tx.hash.slice(0,10)}‚Ä¶</a>)`;
      } catch (e) { aucSt.textContent = '‚ùå ' + (e.reason || e.message); }
    });

    /* ---------- pujar ---------- */
    btnPujar.addEventListener('click', async () => {
      try {
        const tokenId = BigInt(document.getElementById('bid-token').value);
        const eth     = +document.getElementById('bid-amt').value;
        if (tokenId < 0n || eth <= 0) throw new Error('Datos inv√°lidos');

        await signerYContratos();
        bidSt.textContent = 'Enviando puja‚Ä¶';
        const tx = await auctionInst.bid(tokenId, { value: ethToWei(eth) });
        await tx.wait();
        bidSt.innerHTML =
          `‚úÖ Puja aceptada (<a target="_blank"
            href="https://sepolia.etherscan.io/tx/${tx.hash}">
            ${tx.hash.slice(0,10)}‚Ä¶</a>)`;
      } catch (e) { bidSt.textContent = '‚ùå ' + (e.reason || e.message); }
    });




    /* ================== MIS NFTs ================== */
    const btnRefrescar   = document.getElementById('misnfts-refrescar');
    const contenedorNFTs = document.getElementById('misnfts-contenedor');
    const statusNFTs     = document.getElementById('misnfts-status');

    btnRefrescar.addEventListener('click', cargarMisNFTs);
    //document.querySelector('button[data-seccion="misnfts"]')
    //        .addEventListener('click', cargarMisNFTs);

    async function hallarMaxTokenId (contrato) {
      let hi = 1n;
      while (true) { try { await contrato.ownerOf(hi); hi <<= 1n; } catch { break; } }
      let lo = hi >> 1n;
      while (lo + 1n < hi) {
        const mid = (lo + hi) >> 1n;
        try { await contrato.ownerOf(mid); lo = mid; } catch { hi = mid; }
      }
      return lo;
    }

    async function tokenIdsPorScan (contrato, owner) {
      const maxId = await hallarMaxTokenId(contrato);
      const balance = await contrato.balanceOf(owner);
      const ids = [];
      for (let id = 1n; id <= maxId && ids.length < balance; id++) {
        try {
          if ((await contrato.ownerOf(id)).toLowerCase() === owner.toLowerCase())
            ids.push(id);
        } catch {}
      }
      return ids;
    }

    async function cargarMisNFTs () {
      try {
        await asegurarConexion();
        statusNFTs.textContent = 'Consultando blockchain‚Ä¶';
        contenedorNFTs.innerHTML = '';

        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer   = await provider.getSigner();
        const myAddr   = await signer.getAddress();
        const contrato = new ethers.Contract(NFT_ADDR, nftABI, provider);

        const ids = typeof contrato.tokenOfOwnerByIndex === 'function'
          ? await Promise.all(
              [...Array(Number(await contrato.balanceOf(myAddr))).keys()]
                .map(i => contrato.tokenOfOwnerByIndex(myAddr, BigInt(i))))
          : await tokenIdsPorScan(contrato, myAddr);

        ids.sort((a, b) => (a < b ? 1 : -1));   // ordena de mayor a menor  

        if (ids.length === 0) { statusNFTs.textContent = 'No tienes NFTs.'; return; }

        statusNFTs.textContent = `Encontrados ${ids.length}. Cargando metadatos‚Ä¶`;

        for (const id of ids) {
          let meta = {};
          try {
            const uri = await contrato.tokenURI(id);
            meta = await fetch(uri).then(r => r.json());
          } catch {}
          const card = document.createElement('div');
          card.innerHTML = `
            <div class="nft-img-container">
              <span class="nft-id">ID ${id}</span>
              <img src="${meta.image || ''}" class="nft-image"
                  onclick="document.getElementById('modal-img').src=this.src;
                            document.getElementById('modal').style.display='flex';">
            </div>`;
          contenedorNFTs.appendChild(card);
        }
        statusNFTs.textContent = '';
      } catch (e) {
        console.error(e);
        statusNFTs.textContent = '‚ùå ' + e.message;
      }
    }
    const modal = document.getElementById('modal');
    const modalImg = document.getElementById('modal-img');

    modal.addEventListener('click', () => {
      modal.style.display = 'none';
      modalImg.src = '';
    });

  </script>
  <div id="modal">
    <img id="modal-img" src="">
  </div>
  <!-- Modal de carga -->
  <div id="overlay-cargando">
    <div class="spinner"></div>
  </div>
  <div id="overlay-transferencia">
    <div class="spinner"></div>
  </div>


</body>
</html>
