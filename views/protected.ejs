<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dali</title>
  <link rel="stylesheet" href="/css/styles.css" />
  <style>
    body{font-family:sans-serif;margin:20px;background:#e6e5e5f8}
    nav{margin-bottom:20px}
    nav button{margin-right:10px;padding:8px 16px;font-size:16px;cursor:pointer}
    .seccion{display:none}
    .seccion.activa{display:block}
    input,button{margin-top:8px}
  </style>
</head>

<body>
  <nav>
    <button data-seccion="inicio">Inicio</button>
    <button data-seccion="misnfts">Mis NFTs</button>
    <button data-seccion="subir">Subir Obra</button>
    <button data-seccion="transferir">Transferir Obra</button>
    <button data-seccion="subastas">Subastas</button>
    <button id="btnConectar">Conectar MetaMask</button>
    <button id="cerrarSesion">Cerrar sesión</button>
  </nav>

  <main>
    <section id="inicio" class="seccion activa">
      <!-- ① Qué es DaLi -->
      <div class="fila-inicio">
        <div class="texto">
          <h2>¿Qué es DaLi?</h2>
          <p><strong>DaLi</strong> es una plataforma Web3 pensada para creadores digitales que desean <strong>proteger, autenticar y comercializar sus obras</strong> mediante tecnología blockchain.</p>
          <p>Permite registrar imágenes en IPFS y convertirlas en <strong>tokens NFT únicos</strong> sobre la red Ethereum (testnet Sepolia), garantizando la autoría e inmutabilidad de la obra.</p>
        </div>
        <div class="imagen">
          <img src="/img/dali-presentacion.png" alt="Plataforma DaLi en uso">
        </div>
      </div>

      <!-- ② Cómo funciona -->
      <div class="fila-inicio fila-invertida">
        <div class="imagen">
          <img src="/img/como-funciona.png" alt="Cómo funciona DaLi">
        </div>
        <div class="texto">
          <h2>¿Cómo funciona?</h2>
          <p>1️⃣ Conectas tu wallet (MetaMask) con un clic.</p>
          <p>2️⃣ Subes tu obra: se almacena en IPFS.</p>
          <p>3️⃣ Se genera una metadata con enlace IPFS.</p>
          <p>4️⃣ Se registra el NFT en la blockchain mediante un contrato inteligente.</p>
          <p>Cada obra queda asociada a tu wallet como prueba de propiedad. El identificador único de la obra (CID de IPFS) se registra en la blockchain junto al Token ID, asegurando su autenticidad y permanencia.</p>
        </div>
      </div>



      <!-- ③ Ventajas -->
      <div class="fila-inicio">
        <div class="texto">
          <h2>¿Por qué usar DaLi?</h2>
          <p>🔐 <strong>Seguridad:</strong> nadie puede modificar o eliminar tu obra una vez registrada.<br>
            🌐 <strong>Accesibilidad:</strong> todo el proceso ocurre desde una web intuitiva.<br>
            🤝 <strong>Transferencia y subastas:</strong> puedes ceder o vender tus NFTs directamente.<br>
            📜 <strong>Transparencia:</strong> cada transacción queda registrada públicamente.</p>
        </div>
        <div class="imagen">
          <img src="/img/ventajas.png" alt="Ventajas de la plataforma DaLi">
        </div>
      </div>

      <!-- ④ Casos de uso -->
      <div class="fila-inicio">
        <div class="texto">
          <h2>¿Quién puede beneficiarse de DaLi?</h2>
          <p>🎨 <strong>Creadores visuales:</strong> ya seas ilustrador, fotógrafo, diseñador o artista digital, puedes registrar tus obras fácilmente como NFTs.</p>
        </div>
        <div class="imagen">
          <img src="/img/casos-uso.png" alt="Casos de uso de DaLi">
        </div>
      </div>


            <!-- ⑤ Preguntas frecuentes -->
      <div class="fila-inicio fila-invertida">
        <div class="imagen">
          <img src="/img/preguntas-frecuentes.png" alt="Preguntas frecuentes sobre DaLi">
        </div>
        <div class="texto">
          <h2>Preguntas frecuentes</h2>
          <p><strong>¿Necesito saber programar para usar DaLi?</strong><br>
          No, la plataforma está pensada para que cualquier persona pueda registrar sus obras fácilmente.</p>

          <p><strong>¿Cuánto cuesta registrar una obra?</strong><br>
          Actualmente en la red de pruebas Sepolia es gratuito. En la red principal de Ethereum, dependerá del gas.</p>

          <p><strong>¿Dónde se guarda la imagen?</strong><br>
          Las imágenes se almacenan en IPFS, un sistema descentralizado que asegura su disponibilidad e integridad.</p>
        </div>
      </div>



    </section>




    <!-- ② MIS NFTs -->
    <section id="misnfts" class="seccion">
      <div style="display: flex; justify-content: flex-end; align-items: center;">
        <button id="misnfts-refrescar" title="Recargar" class="btn-recargar">🔄</button>
      </div>

      <p id="misnfts-status" style="margin-top: 0;">&nbsp;</p>

      <div id="misnfts-contenedor"
        style="display: grid; grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); gap: 16px; margin-top:16px;">
      </div>
    </section>

    <!-- ③ SUBIR -->
    <section id="subir" class="seccion">
      <div class="upload-wrapper">
        <button id="btnRegistrar" class="btn-registrar" style="display: none;">Registrar Obra</button>
        <button id="btnRecargarSubir" class="btn-recargar" style="display: none;" title="Recargar">🔄</button>


        <!-- Subida -->
        <label class="upload-box" id="upload-box">
          <input type="file" id="archivo" accept="image/*" hidden />
          <img id="preview" />
          <span id="placeholder">Haz click para subir tu imagen</span>
        </label>

        <!-- Resultado -->
        <div id="respuesta" class="resultado-obra"></div>
      </div>
    </section>




    <!-- ④ TRANSFERIR -->
    <section id="transferir" class="seccion">
      <form id="formBuscarUsuario">
        <label for="nombre-usuario">Nombre del destinatario:</label>
        <input type="text" id="nombre-usuario" placeholder="Ej. Rodri" required>
        <button type="submit">Buscar</button>
        <p id="estado-busqueda" style="color:red;"></p>
      </form>
    </section>

    <!-- Modal para selección de obra -->
    <div id="modal-nfts" class="modal-nfts">
      <div class="modal-contenido">
        <span id="cerrar-modal" class="cerrar-modal">×</span>

        <div id="bloque-transferencia" style="display: none;">
          <h3>Selecciona la obra que quieres transferir</h3>
          <div id="galeria-nfts" class="galeria-nfts"></div>
          <div style="text-align: center; margin-top: 20px;">
            <button id="confirmarTransferencia" class="btn-transferir">Transferir</button>
          </div>
          <p id="estado-transferencia"></p>
        </div>

        <p id="cargando-nfts" style="color: gray; font-size: 18px;">Cargando obras…</p>
      </div>
    </div>



    <!-- ⑤ SUBASTAS -->
    <section id="subastas" class="seccion">
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <button id="abrirCrearSubasta">➕ Crear subasta</button>
        <button id="btnAucRefresh" class="btn-recargar" title="Recargar">🔄</button>
      </div>

      <p id="auc-status" style="margin-top: 0;">&nbsp;</p>
      <div id="auc-grid"
          style="display: grid; grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); gap: 16px; margin-top:16px;">
      </div>

      <!-- Modal unificado para crear subasta -->
      <div id="modal-elegir-nft" class="modal-nfts">
        <div class="modal-contenido">
          <span id="cerrar-modal-elegir-nft" class="cerrar-modal">×</span>
          <h3>Crear Subasta</h3>
          
          <p>Selecciona tu NFT:</p>
          <div id="galeria-elegir-nft" class="galeria-nfts" style="margin-bottom: 20px;"></div>
          <p id="cargando-nfts-subasta" style="color:gray;font-size:16px;">Cargando obras…</p>

          <label>Precio mínimo (ETH): <input type="number" id="auc-min" min="0" step="0.001"></label><br>
          <label>Duración:
            <input type="number" id="auc-h" min="0" value="0" style="width:60px"> h
            <input type="number" id="auc-m" min="0" max="59" value="0" style="width:60px"> m
            <input type="number" id="auc-s" min="0" max="59" value="30" style="width:60px"> s
          </label><br><br>

          <button id="btnCrearAucModal">Crear subasta</button>
          <div id="spinner-subasta" class="spinner" style="display: none; margin: 20px auto;"></div>
          <p id="auc-create-status"></p>
        </div>
      </div>


      <!-- Modal para pujar -->
      <div id="modal-puja" class="modal-nfts">
        <div class="modal-contenido">
          <span id="cerrar-modal-puja" class="cerrar-modal">×</span>
          <h3>Realizar Puja</h3>
          <label>Token ID: <input type="number" id="puja-token" readonly></label><br>
          <label>Tu puja (ETH): <input type="number" id="puja-eth" step="0.001"></label><br><br>
          <button id="btnConfirmarPuja">Confirmar Pujar</button>
          <div id="spinner-puja" class="spinner" style="display: none; margin: 20px auto;"></div>
          <p id="puja-status"></p>
        </div>
      </div>
    </section>

  </main>

  <!-- ============================== SCRIPTS ============================== -->
  <script>
    /* ---------- Navegación entre secciones ---------- */
    const secciones = document.querySelectorAll('.seccion');
    document.querySelectorAll('nav button[data-seccion]')
      .forEach(btn =>
        btn.addEventListener('click', () => {
          const id = btn.dataset.seccion;
          secciones.forEach(s => s.classList.remove('activa'));
          document.getElementById(id).classList.add('activa');
        })
      );

    document.getElementById('cerrarSesion').addEventListener('click', async () => {
      await fetch('/logout', { method: 'POST' });
      window.location.href = '/';
    });
  </script>

  <script type="module">
    /* ==================  CONFIG ================== */
    import { ethers } from 'https://cdn.jsdelivr.net/npm/ethers@6/dist/ethers.min.js';
    import nftABI     from '/ABI.js';
    import auctionABI from '/AuctionABI.js';

    const NFT_ADDR     = '0xc4446571ad11804b84305e42d3a79098b1cf1f48';
    const AUCTION_ADDR = '0xd86fd6ce850edac6898298867fa8d6f52f251c9b';

    const autor            = '<%= username %>';
    const walletDelUsuario = '<%= walletAddress %>';
    const ethToWei         = eth => ethers.parseEther(String(eth));

    let auctionInst = null;
    let metamaskOK  = false;


    let solicitandoConexion = false;

    async function asegurarConexion () {
      if (!window.ethereum) throw new Error('MetaMask no detectado');
      const accs = await window.ethereum.request({ method: 'eth_accounts' });
      if (accs.length === 0) await window.ethereum.request({ method: 'eth_requestAccounts' });
      metamaskOK = true;
    }

    async function signerYContratos () {
      await asegurarConexion();
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer   = await provider.getSigner();
      const nftInst  = new ethers.Contract(NFT_ADDR, nftABI, signer);
      if (!auctionInst)
        auctionInst = new ethers.Contract(AUCTION_ADDR, auctionABI, signer);
      return { signer, nftInst };
    }



    btnConectar.addEventListener('click', async () => {
      if (solicitandoConexion) return;

      try {
        solicitandoConexion = true;
        btnConectar.disabled = true;
        btnConectar.textContent = 'Conectando...';

        await asegurarConexion(); 

        const cuentas = await window.ethereum.request({ method: 'eth_accounts' });
        alert(`🦊 MetaMask conectada: ${cuentas[0]}`);

        btnConectar.textContent = 'Conectado ✅';
        btnConectar.disabled = true;
      } catch (err) {
        alert('❌ Error al conectar MetaMask: ' + err.message);
        btnConectar.textContent = 'Conectar MetaMask';
        btnConectar.disabled = false;
      } finally {
        solicitandoConexion = false;
      }
    });


    /* ================== SUBIR / MINT ================== */
    const archivoInput = document.getElementById('archivo');
    const preview = document.getElementById('preview');
    const placeholder = document.getElementById('placeholder');
    const uploadBox = document.getElementById('upload-box');

    // Mostrar vista previa y ocultar borde y texto
    archivoInput.addEventListener('change', e => {
      const file = e.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = e => {
        preview.src = e.target.result;
        preview.style.display = 'block';
        placeholder.style.display = 'none';
        uploadBox.style.border = 'none'; // Oculta borde
        uploadBox.style.background = 'none';
        btnRegistrar.style.display = 'block';
      };
      reader.readAsDataURL(file);
    });

    // Registrar NFT
    btnRegistrar.addEventListener('click', async () => {
      const file = archivoInput.files[0];
      if (!autor || !file) {
        alert('Completa autor + archivo');
        return;
      }

      const overlay = document.getElementById('overlay-cargando');
      overlay.style.display = 'flex'; 

      try {
        const fd = new FormData();
        fd.append('autor', autor);
        fd.append('miArchivo', file);

        const r = await fetch('/subir-archivo', { method: 'POST', body: fd });
        if (!r.ok) throw new Error('Error subiendo a IPFS');

        const { tokenURI, id } = await r.json();
        const { nftInst } = await signerYContratos();

        const tx = await nftInst.registrarObra(tokenURI);
        const receipt = await tx.wait();

        // Buscar el tokenId en los logs del evento Transfer
        let tokenId = null;
        for (const log of receipt.logs) {
          try {
            const parsed = nftInst.interface.parseLog(log);
            if (parsed.name === 'Transfer') {
              tokenId = parsed.args.tokenId.toString();
              break;
            }
          } catch {}
        }


        
        respuesta.innerHTML = `
          <div class="resultado-obra">
            <h3>✅ Obra registrada correctamente</h3>
            <img src="${preview.src}" alt="Preview de la obra" />
            <p><strong>ID:</strong> ${tokenId ?? 'No detectado'}</p>
            <a href="${tokenURI}" target="_blank">Ver imagen en IPFS</a><br>
            <a href="https://sepolia.etherscan.io/tx/${tx.hash}" target="_blank">
              Ver transacción en Etherscan
            </a>
          </div>
        `;


        
        document.getElementById('upload-box')?.remove();
        placeholder?.remove();
        btnRegistrar.style.display = 'none';
        btnRecargarSubir.style.display = 'block';;
      } catch (e) {
        console.error(e);
        respuesta.textContent = '❌ ' + e.message;
      } finally {
        overlay.style.display = 'none'; 
      }
    });
    const btnRecargarSubir = document.getElementById('btnRecargarSubir');

    btnRecargarSubir.addEventListener('click', () => {
      // Oculta el botón de recargar
      btnRecargarSubir.style.display = 'none';

      // Restablece el área de carga
      archivoInput.value = '';
      preview.src = '';
      preview.style.display = 'none';
      placeholder.style.display = 'inline';
      uploadBox.style.display = 'flex';
      uploadBox.style.border = '2px dashed #888';
      uploadBox.style.background = '#fafafa';

      
      respuesta.innerHTML = '';

      
      btnRegistrar.style.display = 'none';
    });




    /* ================== TRANSFERENCIA ================== */
    const formBuscar = document.getElementById('formBuscarUsuario');
    const inputNombre = document.getElementById('nombre-usuario');
    const estadoBusqueda = document.getElementById('estado-busqueda');
    const modalTransferir = document.getElementById('modal-nfts');
    const galeria = document.getElementById('galeria-nfts');
    const btnCerrar = document.getElementById('cerrar-modal');
    const btnTransferir = document.getElementById('confirmarTransferencia');
    const estadoTransferencia = document.getElementById('estado-transferencia');

    let walletDestino = null;
    let obraSeleccionada = null;

    formBuscar.addEventListener('submit', async e => {
      const cargandoMsg = document.getElementById('cargando-nfts');
      const bloqueTransferencia = document.getElementById('bloque-transferencia');

      e.preventDefault();
      cargandoMsg.style.display = 'block';
      bloqueTransferencia.style.display = 'none';

      const nombre = inputNombre.value.trim();
      estadoBusqueda.textContent = '';
      galeria.innerHTML = '';
      obraSeleccionada = null;

      try {
        const r = await fetch(`/wallet/${nombre}`);
        if (!r.ok) throw new Error('No encontrado');
        const { walletAddress } = await r.json();
        walletDestino = walletAddress;
        modalTransferir.style.display = 'flex';

        const provider = new ethers.BrowserProvider(window.ethereum);
        const contrato = new ethers.Contract(NFT_ADDR, nftABI, provider);
        const signer = await provider.getSigner();
        const myAddr = await signer.getAddress();

        const obras = [];
        const maxId = await hallarMaxTokenId(contrato);
        for (let id = 1n; id <= maxId; id++) {
          try {
            const owner = await contrato.ownerOf(id);
            if (owner.toLowerCase() === myAddr.toLowerCase()) {
              const uri = await contrato.tokenURI(id);
              const meta = await fetch(uri).then(r => r.json());
              obras.push({ id, image: meta.image });
            }
          } catch {}
        }

        obras.sort((a, b) => Number(b.id) - Number(a.id));

        for (const { id, image } of obras) {
          const contenedor = document.createElement('div');
          contenedor.className = 'nft-img-container';

          const idSpan = document.createElement('span');
          idSpan.className = 'nft-id';
          idSpan.textContent = `ID ${id}`;

          const img = document.createElement('img');
          img.src = image;
          img.title = `ID ${id}`;
          img.classList.add('nft-image');

          img.addEventListener('click', () => {
            document.querySelectorAll('.galeria-nfts .nft-img-container')
              .forEach(c => c.classList.remove('seleccionado'));
            contenedor.classList.add('seleccionado');
            obraSeleccionada = id;
            console.log('Obra seleccionada para subasta:', obraElegidaParaSubasta);
          });

          contenedor.appendChild(idSpan);
          contenedor.appendChild(img);
          galeria.appendChild(contenedor);
        }

        // ✅ Muestra la galería cuando termina
        cargandoMsg.style.display = 'none';
        bloqueTransferencia.style.display = 'block';

      } catch {
        cargandoMsg.style.display = 'none';
        estadoBusqueda.textContent = '❌ Usuario no encontrado o sin wallet';
      }
    });



    btnCerrar.addEventListener('click', () => {
      modalTransferir.style.display = 'none';
      galeria.innerHTML = '';
      obraSeleccionada = null;
      estadoTransferencia.textContent = '';
    });

    btnTransferir.addEventListener('click', async () => {
      if (!obraSeleccionada || !walletDestino) return;
      try {
        const overlay = document.getElementById('overlay-transferencia');
        overlay.style.display = 'flex'; // Muestra pantalla de carga

        const { signer, nftInst } = await signerYContratos();
        const tx = await nftInst['safeTransferFrom(address,address,uint256)'](
          await signer.getAddress(), walletDestino, BigInt(obraSeleccionada)
        );
        await tx.wait();

        overlay.style.display = 'none'; // Oculta carga

        // Cierra el modal
        modalTransferir.style.display = 'none';

        // Limpia campos
        inputNombre.value = '';
        estadoBusqueda.textContent = '';
        estadoTransferencia.textContent = '';
        galeria.innerHTML = '';
        obraSeleccionada = null;

        alert('✅ Transferencia completada con éxito');
      } catch (e) {
        console.error(e);
        document.getElementById('overlay-transferencia').style.display = 'none';
        estadoTransferencia.textContent = '❌ ' + (e.reason || e.message);
      }
    });
    btnCerrar.addEventListener('click', () => {
      modalTransferir.style.display = 'none';
      galeria.innerHTML = '';
      obraSeleccionada = null;
      estadoTransferencia.textContent = '';
    });





    /* ================== SUBASTAS ================== */
    const btnCrearAuc = document.getElementById('btnCrearAucModal');
    const btnPujar = document.getElementById('btnPujar');
    const modalPuja = document.getElementById('modal-puja');
    const cerrarModalPuja = document.getElementById('cerrar-modal-puja');
    const inputTokenPuja = document.getElementById('puja-token');
    const inputEthPuja = document.getElementById('puja-eth');
    const btnConfirmarPuja = document.getElementById('btnConfirmarPuja');
    const statusPuja = document.getElementById('puja-status');
    const modalElegir = document.getElementById('modal-elegir-nft');
    const cerrarElegir = document.getElementById('cerrar-modal-elegir-nft');
    const galeriaElegir = document.getElementById('galeria-elegir-nft');
    const cargandoElegir = document.getElementById('cargando-nfts-subasta');
    const spinnerSubasta = document.getElementById('spinner-subasta');
    const aucSt = document.getElementById('auc-create-status');

    let obraElegidaParaSubasta = null;

    // Abrir modal de subasta
    document.getElementById('abrirCrearSubasta')?.addEventListener('click', async () => {
      modalElegir.style.display = 'flex';
      cargandoElegir.style.display = 'block';
      galeriaElegir.innerHTML = '';
      aucSt.textContent = '';
      obraElegidaParaSubasta = null;

      const provider = new ethers.BrowserProvider(window.ethereum);
      const contrato = new ethers.Contract(NFT_ADDR, nftABI, provider);
      const signer = await provider.getSigner();
      const myAddr = await signer.getAddress();

      const obras = [];
      const maxId = await hallarMaxTokenId(contrato);
      for (let id = maxId; id >= 1n; id--) {
        try {
          const owner = await contrato.ownerOf(id);
          if (owner.toLowerCase() === myAddr.toLowerCase()) {
            const uri = await contrato.tokenURI(id);
            const meta = await fetch(uri).then(r => r.json());
            obras.push({ id, image: meta.image });
          }
        } catch {}
      }

      for (const { id, image } of obras) {
        const contenedor = document.createElement('div');
        contenedor.className = 'nft-img-container';

        const idSpan = document.createElement('span');
        idSpan.className = 'nft-id';
        idSpan.textContent = `ID ${id}`;

        const img = document.createElement('img');
        img.src = image;
        img.classList.add('nft-image');

        img.addEventListener('click', () => {
          document.querySelectorAll('#galeria-elegir-nft .nft-img-container')
            .forEach(c => c.classList.remove('seleccionado'));
          contenedor.classList.add('seleccionado');
          obraElegidaParaSubasta = id;
        });

        contenedor.appendChild(idSpan);
        contenedor.appendChild(img);
        galeriaElegir.appendChild(contenedor);
      }

      cargandoElegir.style.display = 'none';
    });

    cerrarElegir.addEventListener('click', () => {
      modalElegir.style.display = 'none';
      galeriaElegir.innerHTML = '';
      obraElegidaParaSubasta = null;
      aucSt.textContent = '';
    });

    cerrarModalPuja.addEventListener('click', () => {
      modalPuja.style.display = 'none';
      inputEthPuja.value = '';
      statusPuja.textContent = '';
    });

    const bidSt = document.getElementById('bid-status');
    const aucGrid = document.getElementById('auc-grid');
    const aucStatus = document.getElementById('auc-status');
    document.getElementById('btnAucRefresh')?.addEventListener('click', cargarSubastas);

    const tNow = () => Math.floor(Date.now() / 1000);
    const short = a => a.slice(0,6) + '…' + a.slice(-4);
    const left = ts => {
      const s = ts - tNow();
      if (s <= 0) return 'cerrada';
      const h = Math.floor(s / 3600);
      const m = Math.floor((s % 3600) / 60);
      return `${h} h ${m} m`;
    };

    const aliasCache = {};
    async function aliasDe(addr) {
      addr = addr.toLowerCase();
      if (aliasCache[addr]) return aliasCache[addr];
      const r = await fetch(`/alias/${addr}`);
      if (!r.ok) return null;
      const { username } = await r.json();
      if (username) aliasCache[addr] = username;
      return username || null;
    }

    async function cargarSubastas() {
      try {
        aucStatus.textContent = 'Buscando subastas en la cadena…';
        aucGrid.innerHTML = '';

        const { nftInst: nft } = await signerYContratos();
        const auc = auctionInst;
        const events = (await auc.queryFilter(auc.filters.AuctionCreated())).reverse();
          console.log("Eventos encontrados:", events.length);
          console.log("Ejemplo evento:", events[0]?.args);
        if (events.length === 0) {
          aucStatus.textContent = 'No hay subastas creadas todavía.';
          return;
        }

        const vistos = new Set();
        for (const ev of events) {
          const tokenId = ev.args[0];
          const minBidWei = ev.args[2];
          if (vistos.has(tokenId)) continue;
          vistos.add(tokenId);

          const lot = await auc.lots(tokenId);
          if (lot.endTime === 0n) continue;

          const vencida = Number(lot.endTime) < tNow();
          if (vencida) {
            try { await (await auc.finalize(tokenId)).wait(); } catch {}
            continue;
          }

          let image = '', title = `Token ${tokenId}`;
          try {
            const uri = await nft.tokenURI(tokenId);
            const meta = await fetch(uri).then(r => r.json());
            image = meta.image || '';
            title = meta.name || title;
          } catch {}

          const card = document.createElement('div');
          card.style.cssText = 'border:1px solid #ddd;border-radius:8px;padding:12px;text-align:center';
          const nombreVend = (await aliasDe(lot.seller)) || short(lot.seller);
          const nombreBidder = lot.highBidder === ethers.ZeroAddress ? '—' : (await aliasDe(lot.highBidder)) || short(lot.highBidder);

          card.innerHTML = `
            <img src="${image}" style="width:100%;aspect-ratio:1/1;object-fit:cover;border-radius:6px">
            <h4 style="margin:6px 0">ID ${tokenId}</h4>
            <p style="font-size:13px;line-height:1.25">
              Precio inicial: ${ethers.formatEther(minBidWei)} ETH<br>
              Mejor puja: ${nombreBidder === '—' ? '—' : `${ethers.formatEther(lot.highBid)} ETH por ${nombreBidder}`}<br>
              Vendedor: ${nombreVend}<br>
              Termina en: ${left(Number(lot.endTime))}
            </p>
            <button style="width:100%;margin-top:4px" onclick="prefillBid(${tokenId})">Pujar</button>`;

          aucGrid.appendChild(card);
        }

        aucStatus.textContent = aucGrid.childElementCount ? '' : 'No hay subastas activas.';
      } catch (err) {
        console.error(err);
        aucStatus.textContent = '❌ ' + (err.message || err);
      }
    }

    window.prefillBid = id => {
      inputTokenPuja.value = id;
      inputEthPuja.value = '';
      statusPuja.textContent = '';
      modalPuja.style.display = 'flex';
    };

    
    btnConfirmarPuja?.addEventListener('click', async () => {
      const spinner = document.getElementById('spinner-puja');
      try {
        const tokenId = BigInt(inputTokenPuja.value);
        const eth = +inputEthPuja.value;

        if (!eth || eth <= 0) throw new Error('Introduce una cantidad válida');

        await asegurarConexion();
        statusPuja.textContent = 'Enviando puja…';
        spinner.style.display = 'block';
        btnConfirmarPuja.disabled = true;

        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner();
        const tx = await auctionInst.bid(tokenId, { value: ethToWei(eth) });
        await tx.wait();

        statusPuja.innerHTML = `✅ Puja aceptada (<a target="_blank" href="https://sepolia.etherscan.io/tx/${tx.hash}">${tx.hash.slice(0, 10)}…</a>)`;

        setTimeout(() => {
          modalPuja.style.display = 'none';
          inputEthPuja.value = '';
          statusPuja.textContent = '';
          spinner.style.display = 'none';
          btnConfirmarPuja.disabled = false;
          cargarSubastas();
        }, 1500);
      } catch (e) {
        console.error(e);
        statusPuja.textContent = '❌ ' + (e.reason || e.message);
        spinner.style.display = 'none';
        btnConfirmarPuja.disabled = false;
      }
    });


    cargarSubastas();


    

    /* ---------- crear subasta ---------- */
    btnCrearAuc.addEventListener('click', async () => {
      const minEthStr = document.getElementById('auc-min').value.trim();
      const h = +document.getElementById('auc-h').value;
      const m = +document.getElementById('auc-m').value;
      const s = +document.getElementById('auc-s').value;
      const durSec = h * 3600 + m * 60 + s;

      if (!obraElegidaParaSubasta || durSec < 1 || !/^\d*\.?\d+$/.test(minEthStr)) {
        aucSt.textContent = '❌ Datos inválidos. Asegúrate de seleccionar un NFT y completar los campos.';
        return;
      }

      try {
        const minWei = ethers.parseEther(minEthStr);
        spinnerSubasta.style.display = 'block';
        btnCrearAuc.disabled = true;
        aucSt.textContent = 'Creando subasta…';

        const { signer, nftInst } = await signerYContratos();
        if (!(await nftInst.isApprovedForAll(await signer.getAddress(), AUCTION_ADDR))) {
          await (await nftInst.setApprovalForAll(AUCTION_ADDR, true)).wait();
        }

        const tx = await auctionInst.createAuction(obraElegidaParaSubasta, minWei, durSec);
        await tx.wait();

        aucSt.innerHTML = `✅ Subasta creada (<a target="_blank"
          href="https://sepolia.etherscan.io/tx/${tx.hash}">
          ${tx.hash.slice(0, 10)}…</a>)`;

        setTimeout(() => {
          modalElegir.style.display = 'none';
          spinnerSubasta.style.display = 'none';
          btnCrearAuc.disabled = false;
          cargarSubastas();
        }, 1500);
      } catch (e) {
        console.error(e);
        aucSt.textContent = '❌ ' + (e.reason || e.message);
        spinnerSubasta.style.display = 'none';
        btnCrearAuc.disabled = false;
      }
    });

    /* ---------- pujar ---------- */
    if (btnPujar){
      btnPujar.addEventListener('click', async () => {
        try {
          const tokenId = BigInt(document.getElementById('bid-token').value);
          const eth     = +document.getElementById('bid-amt').value;
          if (tokenId < 0n || eth <= 0) throw new Error('Datos inválidos');

          await signerYContratos();
          bidSt.textContent = 'Enviando puja…';
          const tx = await auctionInst.bid(tokenId, { value: ethToWei(eth) });
          await tx.wait();
          bidSt.innerHTML =
            `✅ Puja aceptada (<a target="_blank"
              href="https://sepolia.etherscan.io/tx/${tx.hash}">
              ${tx.hash.slice(0,10)}…</a>)`;
        } catch (e) { bidSt.textContent = '❌ ' + (e.reason || e.message); }
      });
    }




    /* ================== MIS NFTs ================== */
    const btnRefrescar   = document.getElementById('misnfts-refrescar');
    const contenedorNFTs = document.getElementById('misnfts-contenedor');
    const statusNFTs     = document.getElementById('misnfts-status');

    btnRefrescar.addEventListener('click', cargarMisNFTs);


    async function hallarMaxTokenId (contrato) {
      let hi = 1n;
      while (true) { try { await contrato.ownerOf(hi); hi <<= 1n; } catch { break; } }
      let lo = hi >> 1n;
      while (lo + 1n < hi) {
        const mid = (lo + hi) >> 1n;
        try { await contrato.ownerOf(mid); lo = mid; } catch { hi = mid; }
      }
      return lo;
    }

    async function tokenIdsPorScan (contrato, owner) {
      const maxId = await hallarMaxTokenId(contrato);
      const balance = await contrato.balanceOf(owner);
      const ids = [];
      for (let id = 1n; id <= maxId && ids.length < balance; id++) {
        try {
          if ((await contrato.ownerOf(id)).toLowerCase() === owner.toLowerCase())
            ids.push(id);
        } catch {}
      }
      return ids;
    }

    async function cargarMisNFTs () {
      try {
        await asegurarConexion();
        statusNFTs.textContent = 'Consultando blockchain…';
        contenedorNFTs.innerHTML = '';

        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer   = await provider.getSigner();
        const myAddr   = await signer.getAddress();
        const contrato = new ethers.Contract(NFT_ADDR, nftABI, provider);

        const ids = typeof contrato.tokenOfOwnerByIndex === 'function'
          ? await Promise.all(
              [...Array(Number(await contrato.balanceOf(myAddr))).keys()]
                .map(i => contrato.tokenOfOwnerByIndex(myAddr, BigInt(i))))
          : await tokenIdsPorScan(contrato, myAddr);

        ids.sort((a, b) => (a < b ? 1 : -1));     

        if (ids.length === 0) { statusNFTs.textContent = 'No tienes NFTs.'; return; }

        statusNFTs.textContent = `Encontrados ${ids.length}. Cargando metadatos…`;

        for (const id of ids) {
          let meta = {};
          try {
            const uri = await contrato.tokenURI(id);
            meta = await fetch(uri).then(r => r.json());
          } catch {}
          const card = document.createElement('div');
          card.innerHTML = `
            <div class="nft-img-container">
              <span class="nft-id">ID ${id}</span>
              <img src="${meta.image || ''}" class="nft-image"
                  onclick="document.getElementById('modal-img').src=this.src;
                            document.getElementById('modal').style.display='flex';">
            </div>`;
          contenedorNFTs.appendChild(card);
        }
        statusNFTs.textContent = '';
      } catch (e) {
        console.error(e);
        statusNFTs.textContent = '❌ ' + e.message;
      }
    }
    cargarMisNFTs();
    const modal = document.getElementById('modal');
    const modalImg = document.getElementById('modal-img');

    modal.addEventListener('click', () => {
      modal.style.display = 'none';
      modalImg.src = '';
    });

  </script>
  <div id="modal">
    <img id="modal-img" src="">
  </div>
  <!-- Modal de carga -->
  <div id="overlay-cargando">
    <div class="spinner"></div>
  </div>
  <div id="overlay-transferencia">
    <div class="spinner"></div>
  </div>


</body>
</html>