<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dali</title>
  <link rel="stylesheet" href="/css/styles.css" />
  <style>
    body {
      font-family: sans-serif;
      margin: 20px;
      background-color: #413e3e;
    }

    nav {
      margin-bottom: 20px;
    }

    nav button {
      margin-right: 10px;
      padding: 8px 16px;
      font-size: 16px;
      cursor: pointer;
    }

    .seccion {
      display: none;
    }

    .seccion.activa {
      display: block;
    }

    input, button {
      margin-top: 8px;
    }
  </style>
</head>
<body>

  <nav>
    <button data-seccion="inicio">Inicio</button>
    <button data-seccion="subir">Subir Obra</button>
    <button data-seccion="transferir">Transferir Obra</button>
    <button data-seccion="pujar">Pujar</button>
    <button id="cerrarSesion">Cerrar sesi칩n</button>
  </nav>

  <main>
    <section id="inicio" class="seccion activa">
      <p>Selecciona una secci칩n del men칰 para comenzar.</p>
    </section>

    <section id="subir" class="seccion">
        <h2>Registrar una Obra como NFT</h2>
        <p>Est치s registrando como: <strong><%= username %></strong></p>
      
        <button id="btnConectar">Conectar a Metamask</button>
      
        <form id="formRegistro" style="margin-top: 20px;">
          <label for="archivo">Seleccionar imagen:</label><br>
          <input type="file" id="archivo" required /><br><br>
      
          <button type="button" id="btnRegistrar">Registrar Obra</button>
        </form>
      
        <div id="respuesta"></div>
    </section>
      

    <section id="transferir" class="seccion">
      <h2>Transferir Obra</h2>
      <p>[Aqu칤 puedes implementar la transferencia de NFTs]</p>
    </section>

    <section id="pujar" class="seccion">
      <h2>Pujar por una obra</h2>
      <p>[Aqu칤 puedes implementar un sistema de pujas o marketplace]</p>
    </section>
  </main>

  <script>
    // Navegaci칩n entre secciones
    const secciones = document.querySelectorAll(".seccion");
    const botones = document.querySelectorAll("nav button[data-seccion]");

    botones.forEach(btn => {
      btn.addEventListener("click", () => {
        const id = btn.getAttribute("data-seccion");
        secciones.forEach(sec => sec.classList.remove("activa"));
        document.getElementById(id).classList.add("activa");
      });
    });

    document.getElementById("cerrarSesion").addEventListener("click", async () => {
      await fetch("/logout", { method: "POST" });
      window.location.href = "/";
    });
  </script>



  <!-- Script de subida y registro de NFT -->
  <script type="module">
    const autor = "<%= username %>";
    const walletDelUsuario = "<%= walletAddress %>";
    import { ethers } from "https://cdn.jsdelivr.net/npm/ethers@6/dist/ethers.min.js";
    import contractABI from "/ABI.js";

    console.log("ABI importado:", contractABI);

    const contractAddress = "0xc4446571ad11804b84305e42d3a79098b1cf1f48";
    let metamaskConectado = false;

    document.getElementById("btnConectar").addEventListener("click", async () => {
        if (!window.ethereum) {
            alert("MetaMask no est치 instalado.");
            return;
        }

        try {
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            const cuentaConectada = accounts[0];

            console.log("游녤 Cuenta conectada desde MetaMask:", cuentaConectada);
            console.log("游녤 Wallet registrada en servidor:", walletDelUsuario);

            if (cuentaConectada.toLowerCase() !== walletDelUsuario.toLowerCase()) {
                alert("丘멆잺 Esta cuenta de MetaMask no coincide con la registrada.");
                return;
            }

            metamaskConectado = true;
            alert("MetaMask conectado correctamente.");
        } catch (err) {
            alert("Error al conectar MetaMask: " + err.message);
        }
    });


    document.getElementById("btnRegistrar").addEventListener("click", async () => {
      const file = document.getElementById("archivo").files[0];
      const respuesta = document.getElementById("respuesta");

      if (!autor || !file) {
        alert("Completa los campos: autor y archivo.");
        return;
      }

      respuesta.innerText = "Subiendo archivo a IPFS, espera...";

      try {
        const formData = new FormData();
        formData.append("autor", autor);
        formData.append("miArchivo", file);

        const resp = await fetch("/subir-archivo", {
          method: "POST",
          body: formData
        });

        if (!resp.ok) throw new Error("Error al subir archivo al servidor");

        const data = await resp.json();
        const tokenURI = data.tokenURI;

        if (!metamaskConectado) {
          await window.ethereum.request({ method: 'eth_requestAccounts' });
          metamaskConectado = true;
        }

        respuesta.innerText = "Firmando y registrando en la blockchain...";

        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner();
        const contrato = new ethers.Contract(contractAddress, contractABI, signer);
        const tx = await contrato.registrarObra(tokenURI);

        const receipt = await tx.wait();
        let tokenId = "desconocido";
        try {
          tokenId = parseInt(receipt.logs[0].topics[3], 16);
        } catch {}

        respuesta.innerHTML = `
          <h3>Obra registrada con 칠xito</h3>
          <p><strong>Token ID:</strong> ${tokenId}</p>
          <p>IPFS: <a href="${tokenURI}" target="_blank">${tokenURI}</a></p>
          <p>Etherscan: 
            <a href="https://sepolia.etherscan.io/tx/${tx.hash}" target="_blank">
              ${tx.hash}
            </a>
          </p>
        `;
      } catch (error) {
        console.error(error);
        respuesta.innerText = "Error: " + error.message;
      }
    });
  </script>
</body>
</html>
